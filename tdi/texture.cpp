#include "stdafx.h"
#include "texture.h"

/* -------------------------------------------------------------------------------------------------------------------- */
/* Mean intensity */
float mean(float *p, int N)
/* -------------------------------------------------------------------------------------------------------------------- */
{ int n;
	float mu=0;
	for (n=0; n<N; n++) mu+=n*p[n] ;		       
 	return mu;
}
/* -------------------------------------------------------------------------------------------------------------------- */
/* Central moment of degree k */
  float moment(float *p, int N, int k)
/* -------------------------------------------------------------------------------------------------------------------- */
{
  int n;
	float muk=0, mu1=0;
  for(n=0; n<N; n++) mu1 += n*p[n];
  for(n=0; n<N; n++) muk += pow(n-mu1, k)*p[n];
	return(muk);
}
/* -------------------------------------------------------------------------------------------------------------------- */
/* Contrast */
  float contrast(float *p, int N)
/* -------------------------------------------------------------------------------------------------------------------- */
{
  int  n;
	float maxp=0, minp=(float)N;
	float crst;
	n=0;
	while(p[n]==0){ n++;}
	minp=(float)n;
	n=N-1;
	while(p[n]==0){ n--;}
	maxp=(float)n;
	crst= ((float) (maxp -minp)*255)/ (maxp+minp);
	return(crst);          
}
/* -------------------------------------------------------------------------------------------------------------------- */
/* Entropy */
  float entropy(float *p, int N)
/* -------------------------------------------------------------------------------------------------------------------- */
{
  int n;
	float entropy=0;
  for(n=0; n<N; n++)  if( p[n]>0)	entropy -= p[n]*log(p[n]); 
 	return(entropy);          
}
/* -------------------------------------------------------------------------------------------------------------------- */
/* Energy */
  float energy(float *p, int N)
/* -------------------------------------------------------------------------------------------------------------------- */
{
  int n;
	float energy=0;
  for(n=0; n<N; n++) 	energy += fabs(p[n]*p[n]); 
 	return(energy);
}
/* -------------------------------------------------------------------------------------------------------------------- */
/* Central moment of degree k */
  float moment_k(float *p, int N, int k)
/* -------------------------------------------------------------------------------------------------------------------- */
{
  int n;
	float muk=0, mu1=0;
  for(n=0; n<N; n++) mu1 += n*p[n];
  for(n=0; n<N; n++) muk += pow(n-mu1, k)*p[n];
	return(muk);         
}


/* -------------------------------------------------------------------------------------------------------------------- */
/* dissimilarite matrice de cooccurrence */
/* N largeur de la matrice*/
  float dissimilarity_cooc(float *p, int N)
/* -------------------------------------------------------------------------------------------------------------------- */
{
  int n, m;
	float f=0;
  for(n=0; n<N; n++) 
		for(m=0; m<N; m++)
			f += abs(n-m)*p[n*N*m];
  return(f);
}
/* -------------------------------------------------------------------------------------------------------------------- */
/* contraste matrice de cooccurrence */
/* N largeur de la matrice*/
  float contraste_cooc(float *p, int N)
/* -------------------------------------------------------------------------------------------------------------------- */
{
  int n, m;
	float f=0;
  for(n=0; n<N; n++) 
		for(m=0; m<N; m++)
			f += (n-m)*(n-m)*p[n*N*m];
  return(f);
}




